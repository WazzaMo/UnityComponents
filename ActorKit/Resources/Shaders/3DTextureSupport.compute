/*
 * 3DTextureSupport Unity Component
 * (c) Copyright 2017, 2018, Warwick Molloy
 * GitHub repo WazzaMo/UnityComponents
 * Provided under the terms of the MIT License.
 */

#define GROUP_SIZE	1

#include "3DTextureTypes.hlsl"

Buffer<SizeType>  Size;

// Parameter Options

Texture3D<float4> InTextureF4;

Texture3D<float>  InTextureF1;
RWTexture3D<float> OutTexture1F;

Buffer<float>      InData;
RWBuffer<float>   OutData;

RWBuffer<float4>  OutColors;

//----------------------
#pragma kernel GetTextureF4Data


[numthreads(GROUP_SIZE,GROUP_SIZE,1)]
void GetTextureF4Data (uint3 id : SV_DispatchThreadID)
{
	OutColors[ indexFrom(Size[0],id)] = InTextureF4[id];
}

//---------
#pragma kernel GetTextureF1Color


[numthreads(GROUP_SIZE,GROUP_SIZE,1)]
void GetTextureF1Color (uint3 id : SV_DispatchThreadID)
{
	// OutColors[ indexFrom(Size[0],id)] = InTextureF1[id];
	float val = InTextureF1[id];
	OutColors[ indexFrom(Size[0],id)] = float4(val,0,0,val);
}

//---------
#pragma kernel GetTextureF1Data


[numthreads(GROUP_SIZE,GROUP_SIZE,1)]
void GetTextureF1Data (uint3 id : SV_DispatchThreadID)
{
	OutData[ indexFrom(Size[0],id)] = InTextureF1[id];
}

//---------
#pragma kernel SetTextureF1Data


[numthreads(1,1,1)]
void SetTextureF1Data(uint3 tID : SV_DISPATCHTHREADID)
{
	OutTexture1F[tID] = InData[ indexFrom(Size[0],tID) ];
}